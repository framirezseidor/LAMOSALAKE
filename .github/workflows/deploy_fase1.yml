name: 01 - Detectar cambios y guardar en repo

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  detect_changes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detectar archivos modificados en MODELOS
        id: changed
        uses: tj-actions/changed-files@v44
        with:
          base_sha: ${{ github.event.pull_request.base.sha }}
          sha: ${{ github.event.pull_request.head.sha }}
          path: MODELOS

      - name: Mostrar archivos detectados
        run: |
          echo "Archivos modificados:"
          echo "${{ steps.changed.outputs.all_changed_files }}"

      - name: Guardar lista en archivo
        run: |
          mkdir -p deploy_metadata
          echo "${{ steps.changed.outputs.all_changed_files }}" | tr ' ' '\n' > deploy_metadata/changed_files.txt
          cat deploy_metadata/changed_files.txt

      - name: Configurar Git para commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Crear o actualizar rama deploy-metadata
        run: |
          # Nos aseguramos de no ensuciar main
          git fetch origin deploy-metadata || true
          git checkout deploy-metadata || git checkout -b deploy-metadata

          # Copiamos el archivo detectado desde la rama del PR
          cp deploy_metadata/changed_files.txt ./deploy_metadata/changed_files.txt

          git add deploy_metadata/changed_files.txt
          git commit -m "Actualizar lista de archivos cambiados para PR #${{ github.event.pull_request.number }}" || echo "No hay cambios para commitear"
          git push origin deploy-metadata

# name: Deploy fase 1

# on:
#   pull_request:
#     branches:
#       - main
#     types: [opened, synchronize, reopened]

# jobs:
#   validate-changes:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout PR code
#         uses: actions/checkout@v3
#         with:
#           fetch-depth: 0

#       - name: Obtener lista de archivos modificados en MODELOS/
#         id: cambios
#         run: |
#           git fetch origin main
#           git diff --name-only origin/main...HEAD -- MODELOS/ > changed_files.txt
#           echo "Archivos modificados:"
#           cat changed_files.txt || true

#           if [ -s changed_files.txt ]; then
#             echo "modelos_changed=true" >> $GITHUB_OUTPUT
#           else
#             echo "modelos_changed=false" >> $GITHUB_OUTPUT
#           fi

#       - name: Subir lista de archivos modificados como artefacto
#         uses: actions/upload-artifact@v4
#         with:
#           name: modelos-pr-changes
#           path: ./changed_files.txt
#           if-no-files-found: warn
#           compression-level: 6
#           overwrite: true
#           include-hidden-files: false


#       - name: Validar scripts (ejemplo)
#         if: steps.cambios.outputs.modelos_changed == 'true'
#         run: |
#           echo "✅ Validando sintaxis básica..."
#           while IFS= read -r file; do
#             echo "Validando $file"
#             # Aquí podrías usar: snow sql --dry-run -f "$file"
#             # o validaciones personalizadas con grep/sed
#           done < changed_files.txt

