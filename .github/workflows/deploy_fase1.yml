name: Validar Cambios en MODELOS (PR)

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened, closed]

jobs:
  validate-changes:
    if: github.event.pull_request.merged == false    
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Obtener lista de archivos modificados en MODELOS/
        id: cambios
        run: |
          git fetch origin main
          git diff --name-only origin/main...HEAD -- MODELOS/ > changed_files.txt
          echo "Archivos modificados:"
          cat changed_files.txt || true

          if [ -s changed_files.txt ]; then
            echo "modelos_changed=true" >> $GITHUB_OUTPUT
          else
            echo "modelos_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Subir lista de archivos modificados como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: modelos-pr-changes
          path: ./deploy-info

      - name: Validar scripts (ejemplo)
        if: steps.cambios.outputs.modelos_changed == 'true'
        run: |
          echo "‚úÖ Validando sintaxis b√°sica..."
          while IFS= read -r file; do
            echo "Validando $file"
            # Aqu√≠ podr√≠as usar: snow sql --dry-run -f "$file"
            # o validaciones personalizadas con grep/sed
          done < changed_files.txt

  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Descargar lista de archivos modificados desde el PR
        uses: actions/download-artifact@v4
        with:
            name: modelos-pr-changes
            path: ./deploy-info

      - name: Verificar contenido de la lista de cambios
        run: |
          echo "Contenido de changed_files.txt:"
          cat ./deploy-info/changed_files.txt || true

      - name: Desplegar archivos modificados
        run: |
          if [ ! -s ./deploy-info/changed_files.txt ]; then
            echo "No hay cambios para desplegar ‚úÖ"
            exit 0
          fi

      # Reemplazo de prefijo para producci√≥n
      - name: Reemplazar prefijo en archivos SQL
        env:
          ORIGIN_PREFIX: "SQ1_"
          PROD_PREFIX: "SP1_"
        run: |
          while IFS= read -r file; do
            if [[ -f "$file" ]]; then
              sed -i -E "s/\b${ORIGIN_PREFIX}/${PROD_PREFIX}/g" "$file"
            fi
          done


          while IFS= read -r file; do
            echo "üöÄ Ejecutando $file..."
            snow sql -f "$file"
          done < ./deploy-info/changed_files.txt

      - name: Crear nuevo tag de despliegue
        run: |
          NEW_TAG="deploy-$(date +'%Y%m%d-%H%M%S')"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "üè∑ Tag creado: $NEW_TAG"
