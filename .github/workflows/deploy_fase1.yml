name: Deploy Snowflake on Merge

# -----------------------------------------------------------
# üîπ Desencadenador:
# Se ejecuta al cerrar un Pull Request fusionado (merged)
# hacia la rama main.
# -----------------------------------------------------------
on:
  pull_request:
    types:
      - closed
    branches:
      - main

# -----------------------------------------------------------
# üîπ Permisos necesarios:
# "contents: write" permite:
#   - Crear tags (para versionar despliegues)
#   - Subir archivos al repo (logs u otros metadatos)
# -----------------------------------------------------------
permissions:
  contents: write

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # -------------------------------------------------------
      # 1Ô∏è‚É£ Clonar el repositorio completo
      # -------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para tags y commits posteriores

      # -------------------------------------------------------
      # 2Ô∏è‚É£ Obtener archivos modificados desde la API de GitHub
      # -------------------------------------------------------
      - name: Obtener archivos .sql modificados
        id: get-changes
        run: |
          echo "Consultando archivos del PR #${{ github.event.pull_request.number }}..."

          # Llamada a la API de GitHub para obtener archivos del PR
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            | jq -r '.[].filename' > all_files.txt

          echo "üßæ Archivos detectados por la API (sin filtrar):"
          cat all_files.txt || echo "‚ö†Ô∏è No se encontraron archivos."

          # Filtrar archivos .sql (insensible a may√∫sculas)
          grep -E -i '\.sql$' all_files.txt > changed_files.txt || true

          echo ""
          echo "üìÑ Archivos SQL modificados:"
          cat changed_files.txt || echo "‚ö†Ô∏è No se detectaron archivos SQL modificados."

      # -------------------------------------------------------
      # 3Ô∏è‚É£ Validar si hay archivos SQL a desplegar
      # -------------------------------------------------------
      - name: Verificar si hay scripts para ejecutar
        id: check
        run: |
          if [ ! -s changed_files.txt ]; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ No se detectaron scripts SQL para desplegar."
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "üöÄ Se detectaron scripts SQL, procederemos al deploy."
          fi

      # -------------------------------------------------------
      # 4Ô∏è‚É£ Crear archivo de configuraci√≥n de conexi√≥n a Snowflake
      # -------------------------------------------------------
      - name: Set Snowflake Credentials
        run: |
          mkdir -p .snowflake
          cat <<EOF > .snowflake/config.toml
          default_connection_name = "conectionSnowflake"
          [connections]
          [connections.conectionSnowflake]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          database = "${{ secrets.SNOWFLAKE_DATABASE }}"
          schema = "${{ secrets.SNOWFLAKE_SCHEMA }}"
          warehouse = "${{ secrets.SNOWFLAKE_WAREHOUSE }}"
          EOF

      # -------------------------------------------------------
      # 5Ô∏è‚É£ Instalar y verificar Snowflake CLI
      # -------------------------------------------------------
      - name: Install snowflake-cli
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"

      - name: Check Version and Verify Connection
        run: |
          snow --version
          snow connection test
          echo "‚úÖ Conexi√≥n verificada. Rama: $GITHUB_REF_NAME"

      # -------------------------------------------------------
      # 6Ô∏è‚É£ (Opcional) Cambiar prefijos de entorno (DEV‚ÜíPRD)
      # -------------------------------------------------------
      - name: Reemplazar prefijos para producci√≥n
        if: steps.check.outputs.no_changes == 'false'
        env:
          ORIGIN_PREFIX: "SQ1_"
          PROD_PREFIX: "SP1_"
        run: |
          while read -r file; do
            if [[ -f "$file" ]]; then
              echo "üîÑ Cambiando prefijo en: $file"
              sed -i -E "s/\b${ORIGIN_PREFIX}/${PROD_PREFIX}/g" "$file"
            fi
          done < changed_files.txt

      # -------------------------------------------------------
      # 7Ô∏è‚É£ Ejecutar los scripts SQL detectados
      # y registrar los resultados en un log local
      # -------------------------------------------------------
      - name: Ejecutar scripts SQL modificados
        if: steps.check.outputs.no_changes == 'false'
        run: |
          mkdir -p deploy_metadata
          LOG_FILE="deploy_metadata/deploy_log_$(date +'%Y%m%d-%H%M%S').txt"

          echo "Fecha: $(date)" > $LOG_FILE
          echo "Archivos ejecutados durante el deploy:" >> $LOG_FILE
          echo "------------------------------------" >> $LOG_FILE

          while read -r file; do
            if [[ -f "$file" ]]; then
              echo "‚ñ∂Ô∏è Ejecutando $file..."
              echo "$file" >> $LOG_FILE
              snow sql -f "$file"
            else
              echo "‚ö†Ô∏è El archivo $file no existe." | tee -a $LOG_FILE
            fi
          done < changed_files.txt

          echo "------------------------------------" >> $LOG_FILE
          echo "‚úÖ Despliegue finalizado: $(date)" >> $LOG_FILE

      # -------------------------------------------------------
      # 8Ô∏è‚É£ Subir el log al repositorio
      # Crea/actualiza la carpeta deploy_metadata con el registro
      # -------------------------------------------------------
      - name: Commit deploy log to repository
        if: steps.check.outputs.no_changes == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add deploy_metadata/
          git commit -m "üìú Registro de despliegue autom√°tico ($(date +'%Y-%m-%d %H:%M'))" || echo "Sin cambios que commitear."
          git push origin HEAD:main

      # -------------------------------------------------------
      # 9Ô∏è‚É£ Publicar log tambi√©n como artifact descargable
      # -------------------------------------------------------
      - name: Publicar log del despliegue
        if: steps.check.outputs.no_changes == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: deploy-log
          path: deploy_metadata/
          retention-days: 15

      # -------------------------------------------------------
      # üîü Crear un tag de despliegue (versi√≥n del release)
      # -------------------------------------------------------
      - name: Crear tag de despliegue
        if: steps.check.outputs.no_changes == 'false'
        run: |
          NEW_TAG="deploy-$(date +'%Y%m%d-%H%M%S')"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "üè∑ Nuevo tag de despliegue creado: $NEW_TAG"
