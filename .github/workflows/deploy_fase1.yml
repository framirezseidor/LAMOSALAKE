name: Deploy Snowflake on Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Obtener archivos cambiados del PR usando la API de GitHub
      - name: Obtener archivos .sql modificados
        id: get-changes
        run: |
          echo "Consultando archivos del PR #${{ github.event.pull_request.number }}..."
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "${{ github.api_url }}/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            | jq -r '.[].filename' | grep -i '\.sql$' > changed_files.txt || true

          echo "Archivos detectados:"
          cat changed_files.txt || echo "‚ö†Ô∏è No hay archivos SQL modificados."

      # 3Ô∏è‚É£ Validar si hay cambios antes de continuar
      - name: Verificar si hay scripts para ejecutar
        id: check
        run: |
          if [ ! -s changed_files.txt ]; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "‚úÖ No se detectaron scripts SQL para desplegar."
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "üöÄ Se detectaron scripts SQL, procederemos al deploy."
          fi


      - name: Set Snowflake Credentials
        run: |
          mkdir -p .snowflake
          cat <<EOF > .snowflake/config.toml
          default_connection_name = "conectionSnowflake"
          [connections]
          [connections.conectionSnowflake]
          account = "${{ secrets.SNOWFLAKE_ACCOUNT }}"
          user = "${{ secrets.SNOWFLAKE_USER }}"
          password = "${{ secrets.SNOWFLAKE_PASSWORD }}"
          database = "${{ secrets.SNOWFLAKE_DATABASE }}"
          schema = "${{ secrets.SNOWFLAKE_SCHEMA }}" 
          warehouse = "${{ secrets.SNOWFLAKE_WAREHOUSE }}"
 
      - name: Verify Snowflake config file
        run: ls -la .snowflake && cat .snowflake/config.toml
 
      - name: Install snowflake-cli
        uses: Snowflake-Labs/snowflake-cli-action@v1.5
        with:
          cli-version: "latest"
          default-config-file-path: ".snowflake/config.toml"
     
      - name: Check Version and Verify Connection
        run: |
              snow --version
              snow connection test
              echo "Using branch $GITHUB_REF_NAME"


      # 4Ô∏è‚É£ (Opcional) Reemplazar prefijos en los scripts
      - name: Reemplazar prefijos para producci√≥n
        if: steps.check.outputs.no_changes == 'false'
        env:
          ORIGIN_PREFIX: "SQ1_"
          PROD_PREFIX: "SP1_"
        run: |
          while read -r file; do
            if [[ -f "$file" ]]; then
              echo "Cambiando prefijo en: $file"
              sed -i -E "s/\b${ORIGIN_PREFIX}/${PROD_PREFIX}/g" "$file"
            fi
          done < changed_files.txt

      # 5Ô∏è‚É£ Ejecutar los scripts SQL en Snowflake
      - name: Ejecutar scripts SQL modificados
        if: steps.check.outputs.no_changes == 'false'
        run: |
          while read -r file; do
            if [[ -f "$file" ]]; then
              echo "Ejecutando $file..."
              snow sql -f "$file"
            else
              echo "‚ö†Ô∏è El archivo $file no existe en el repo."
            fi
          done < changed_files.txt

      # 6Ô∏è‚É£ Crear tag de despliegue (opcional)
      - name: Crear tag de despliegue
        if: steps.check.outputs.no_changes == 'false'
        run: |
          NEW_TAG="deploy-$(date +'%Y%m%d-%H%M%S')"
          git tag $NEW_TAG
          git push origin $NEW_TAG
          echo "üè∑ Nuevo tag de despliegue creado: $NEW_TAG"

