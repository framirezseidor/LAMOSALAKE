-- DIM_CLI_COORDINADORCOMERCIAL --43 OK
-- DIM_CLI_ASESORCOMERCIAL --195 OK
-- DIM_CLI_EJECUTIVOCIS --43 OK
-- DIM_CLI_TIENDARECIBO --1 OK

-- DIM_CLI_CLIENTE --6468
-- DIM_CLI_DESTINATARIO
-- DIM_CLI_SOLICITANTE

-- DIM_CLI_GRUPOSOLICITANTE  -8414 OK OK
-- DIM_CLI_CLASIFICACIONCLIENTE -686 OK OK
-- DIM_CLI_GRUPOIMPUTCLIENTE -22 OK OK
-- DIM_CLI_GRUPOCLIENTES -54 OK OK
-- DIM_CLI_GRUPOCLIENTES1 -18 OK OK
-- DIM_CLI_GRUPOCLIENTES2 -20 OK OK
-- DIM_CLI_GRUPOCLIENTES3 -4 OK
-- DIM_CLI_GRUPOCLIENTES4 -6 OK
-- DIM_CLI_GRUPOCLIENTES5 -6 OK
-- DIM_CLI_RAMO -137 OK

-- PARÁMETROS
SET RAW_TABLE = 'RAW.SQ1_EXT_0CUSTOMER_ATTR';
SET PRE_TABLE = 'PRE.PDIM_CLI_SOLICITANTE';
SET CON_TABLE = 'CON.DIM_CLI_SOLICITANTE';
SET VW_CONSUMO = 'CON.VW_DIM_CLI_SOLICITANTE';  -- si aplica
SET PRIMARY_KEY = 'SOLICITANTE_ID';      -- o múltiples si aplica
SET FECHA_CAMPO = 'FECHA_CREACION';  -- si aplica
SET FECHA_MIN = '2023-01-01';        -- rango esperado
SET FECHA_MAX = '2025-12-31';

-- 1. Validar cantidad de registros extraídos desde SAP vs RAW
SELECT 'Validación 1 - Registros en RAW' AS PRUEBA,
       COUNT(*) AS TOTAL_REGISTROS
FROM IDENTIFIER($PRE_TABLE);SELECT 'Validación 1 - Registros en RAW' AS PRUEBA,
       COUNT(*) AS TOTAL_REGISTROS
FROM IDENTIFIER($PRE_TABLE);

SELECT COUNT(*) FROM (SELECT
            A.KUNNR,
            A.BRSCH,
            A.KONZS,
            A.LAND1,
            A.REGIO,
            A.ORT01,
            A.STCD1,
            A.KUKLA,
            A.PSTLZ,
            A.STRAS,
            A.KTOKD,
            T.TXTMD,
            A.SISORIGEN_ID,
            A.MANDANTE,
            CURRENT_TIMESTAMP() AS FECHA_CARGA,
            TO_CHAR(CURRENT_TIMESTAMP(), 'TZH:TZM') AS ZONA_HORARIA
        FROM RAW.SQ1_EXT_0CUSTOMER_ATTR A
        LEFT JOIN RAW.SQ1_EXT_0CUSTOMER_TEXT T
            ON A.KUNNR = T.KUNNR);
-- 2. Validar carga en RAW (simplemente existencia + preview de columnas)
SHOW COLUMNS IN IDENTIFIER($RAW_TABLE);

-- 3. Validar existencia de datos en PRE y CON como evidencia de ejecución de SPs
SELECT 'Validación 3 - Registros en PRE', COUNT(*) FROM IDENTIFIER($PRE_TABLE);
SELECT 'Validación 3 - Registros en CON', COUNT(*) FROM IDENTIFIER($CON_TABLE);

-- 4. Validación de integridad básica: conteo de valores únicos vs SAP (esto requiere join con tabla SAP si se tiene)

-- 5. Validar vista (si aplica)
SELECT 'Validación 5 - Vista', COUNT(*) AS REGISTROS FROM IDENTIFIER($VW_CONSUMO);
SELECT *  FROM IDENTIFIER($VW_CONSUMO);

-- 6. Validar claves primarias (únicas y no nulas)
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    COORDINADORCOMERCIAL_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_COORDINADORCOMERCIAL
GROUP BY COORDINADORCOMERCIAL_ID
HAVING COUNT(*) > 1;


SELECT 
    'Validación - Claves únicas en CON' AS VALIDACION,
    COUNT(DISTINCT COORDINADORCOMERCIAL_ID) AS TOTAL_CLAVES_UNICAS
FROM CON.DIM_CLI_COORDINADORCOMERCIAL;

-- 7. Validar nulos en campos clave
SELECT 'Validación 7 - Nulos en PK', COUNT(*) 
FROM IDENTIFIER($CON_TABLE)
WHERE $PRIMARY_KEY IS NULL;

-- 8. Validar tipos de datos (estructura de columnas)
SHOW COLUMNS IN IDENTIFIER($CON_TABLE);
SELECT *  FROM IDENTIFIER($CON_TABLE);


SELECT COUNT(*)  FROM IDENTIFIER($CON_TABLE);
-- 9. Validar transformaciones esperadas (simulación)
-- Aquí puedes insertar validaciones por campo si sabes reglas (ej. "si campo X viene como 'A', en CON debe ser 'Activo'")
-- Ejemplo genérico:
-- SELECT campo1, campo2 FROM IDENTIFIER($PRE_TABLE)
-- WHERE campo1 = 'X' AND campo2 != 'Regla esperada';

-- 10. Validar fechas dentro de rango
SELECT 'Validación 10 - Fechas fuera de rango', COUNT(*)
FROM IDENTIFIER($CON_TABLE)
WHERE $FECHA_CAMPO NOT BETWEEN TO_DATE($FECHA_MIN) AND TO_DATE($FECHA_MAX);

-- 11. Validar nombres de columnas (estándares: sin espacios, sin acentos, en mayúsculas)
SELECT 'Validación 11 - Nombres no estándar', COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = SPLIT_PART($CON_TABLE, '.', 2)
  AND TABLE_SCHEMA = SPLIT_PART($CON_TABLE, '.', 1)
  AND (COLUMN_NAME LIKE '% %' OR COLUMN_NAME LIKE '%Á%' OR COLUMN_NAME != UPPER(COLUMN_NAME)); 

-- 12. Validación de macros en Alteryx debe hacerse manualmente o vía revisión de metadatos externos.
-- No se implementa en SQL.


SET RAW_TABLE = 'RAW.SQ1_TBL_KNVP';

SELECT 
    PARVW,
    COUNT(DISTINCT LIFNR) AS TOTAL_DISTINTOS_LIFNR
FROM IDENTIFIER($RAW_TABLE)
GROUP BY PARVW
ORDER BY PARVW;


-------------------------------
--REVISION DE DUPLICADOS POR TABLA

-- COORDINADORCOMERCIAL
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_COORDINADORCOMERCIAL' AS TABLA,
    COORDINADORCOMERCIAL_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_COORDINADORCOMERCIAL
GROUP BY COORDINADORCOMERCIAL_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOSOLICITANTE
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOSOLICITANTE' AS TABLA,
    GRUPOSOLICITANTE_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOSOLICITANTE
GROUP BY GRUPOSOLICITANTE_ID
HAVING COUNT(*) > 1

UNION ALL

-- CLASIFICACIONCLIENTE
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_CLASIFICACIONCLIENTE' AS TABLA,
    CLASIFICACIONCLIENTE_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_CLASIFICACIONCLIENTE
GROUP BY CLASIFICACIONCLIENTE_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOIMPUTCLIENTE
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOIMPUTCLIENTE' AS TABLA,
    GRUPOIMPUTCLIENTE_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOIMPUTCLIENTE
GROUP BY GRUPOIMPUTCLIENTE_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOCLIENTES
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOCLIENTES' AS TABLA,
    GRUPOCLIENTES_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOCLIENTES
GROUP BY GRUPOCLIENTES_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOCLIENTES1
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOCLIENTES1' AS TABLA,
    GRUPOCLIENTES1_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOCLIENTES1
GROUP BY GRUPOCLIENTES1_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOCLIENTES2
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOCLIENTES2' AS TABLA,
    GRUPOCLIENTES2_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOCLIENTES2
GROUP BY GRUPOCLIENTES2_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOCLIENTES3
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOCLIENTES3' AS TABLA,
    GRUPOCLIENTES3_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOCLIENTES3
GROUP BY GRUPOCLIENTES3_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOCLIENTES4
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOCLIENTES4' AS TABLA,
    GRUPOCLIENTES4_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOCLIENTES4
GROUP BY GRUPOCLIENTES4_ID
HAVING COUNT(*) > 1

UNION ALL

-- GRUPOCLIENTES5
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOCLIENTES5' AS TABLA,
    GRUPOCLIENTES5_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOCLIENTES5
GROUP BY GRUPOCLIENTES5_ID
HAVING COUNT(*) > 1;


-- GRUPOSOLICITANTE
SELECT 
    'Validación 6 - PK duplicadas' AS VALIDACION,
    'DIM_CLI_GRUPOSOLICITANTE' AS TABLA,
    GRUPOSOLICITANTE_ID AS CLAVE_DUPLICADA,
    COUNT(*) AS TOTAL_DUPLICADOS
FROM CON.DIM_CLI_GRUPOSOLICITANTE
GROUP BY GRUPOSOLICITANTE_ID
HAVING COUNT(*) > 1;

SELECT* FROM CON.DIM_CLI_GRUPOSOLICITANTE
WHERE GRUPOSOLICITANTE_ID = 'Z_DIVERSOS';