CREATE OR REPLACE PROCEDURE PRE.SP_PRE_PFCT_LOG_INVENTARIO()
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
/*
---------------------------------------------------------------------------------
 Versión:            1.0
 Fecha de creación:  2025-04-03
 Creador:            Carlos Panta
 Descripción:        SP que transforma datos desde la capa RAW a PRE para PFCT_LOG_INVENTARIO
---------------------------------------------------------------------------------
*/

DECLARE
    -- VARIABLES DE CONTROL
    F_INICIO        TIMESTAMP_NTZ(9);
    F_FIN           TIMESTAMP_NTZ(9);
    T_EJECUCION     NUMBER(38,0);
    ROWS_INSERTED   NUMBER(38,0);
    TEXTO           VARCHAR(200);

BEGIN

    ---------------------------------------------------------------------------------
    -- STEP 1: LIMPIEZA DE DATOS EN LA TABLA PRE
    ---------------------------------------------------------------------------------
    BEGIN
        SELECT CURRENT_TIMESTAMP() INTO :F_INICIO;

        DELETE FROM PRE.PFCT_LOG_INVENTARIO;

        SELECT CURRENT_TIMESTAMP() INTO :F_FIN;
        SELECT DATEDIFF(millisecond, :F_INICIO, :F_FIN) INTO :T_EJECUCION;
    EXCEPTION
        WHEN statement_error THEN
            SELECT ('Error en DELETE: ' || :sqlerrm) INTO :TEXTO;
    END;

    ---------------------------------------------------------------------------------
    -- STEP 2: INSERCIÓN DE DATOS DESDE RAW HACIA PRE
    ---------------------------------------------------------------------------------
    BEGIN
        SELECT CURRENT_TIMESTAMP() INTO :F_INICIO;

        INSERT INTO PRE.PFCT_LOG_INVENTARIO
        (
            ANIO,
            MES, 
            ANIOMES, 
            FECHA_FOTO_INVENTARIO, 
            CENTRO_ID, 
            ALMACEN_ID, 
            ALMACENCENTRO_ID, 
            MATERIAL_ID, 
            MATERIALCENTRO_ID, 
            TIPOMATERIAL_ID, 
            CONTROL_PRECIOS, 
            STOCKESPECIAL, 
            NUMSTOCKESPECIAL, 
            LOTE, 
            LOTECENTRO_ID, 
            IND_LIBRE_UTILIZACION_UMB, 
            IND_BLOQUEADO_UMB, 
            IND_CONTROL_CALIDAD_UMB, 
            IND_TRANSITO_UMB, 
            IND_INVENTARIO_FISICO_UMB, 
            IND_LIBRE_VENTA_UMB, 
            IND_STOCK_SEGURIDAD_UMB, 
            UNI_UMB, 
            IND_LIBRE_UTILIZACION_EST, 
            IND_BLOQUEADO_EST, 
            IND_CONTROL_CALIDAD_EST, 
            IND_TRANSITO_EST, 
            IND_INVENTARIO_FISICO_EST, 
            IND_LIBRE_VENTA_EST, 
            IND_STOCK_SEGURIDAD_EST, 
            UNI_EST, 
            IND_COSTO_INV_MXN, 
            MON_MXN, 
            IND_COSTO_INV_LOC, 
            MON_LOC, 
            IND_COSTO_INV_USD, 
            MON_USD, 
            SISORIGEN_ID, 
            MANDANTE, 
            FECHA_CARGA, 
            ZONA_HORARIA 
        )
       SELECT
            IFNULL(SUBSTR(Z.FECHA,1,4),''),-- ANIO,
            IFNULL(SUBSTR(Z.FECHA,6,2),''),-- MES, 
            IFNULL(CONCAT(SUBSTR(Z.FECHA,1,4),SUBSTR(Z.FECHA,6,2)),''),-- ANIOMES, 
            IFNULL(FECHA,'1900-01-01'),-- FECHA_FOTO_INVENTARIO, 
            IFNULL(LTRIM(PLANT,'0'),''),-- CENTRO_ID, 
            IFNULL(LTRIM(STORAGELOCATION,'0'),''),-- ALMACEN_ID, 
            IFNULL(CONCAT(LTRIM(Z.PLANT,'0'),'_',LTRIM(Z.STORAGELOCATION,'0')),''),-- ALMACENCENTRO_ID, 
            IFNULL(LTRIM(MATERIAL,'0'),''),-- MATERIAL_ID, 
            IFNULL(CONCAT(LTRIM(PLANT,'0'),'_',LTRIM(MATERIAL,'0')),''),-- MATERIALCENTRO_ID, 
            IFNULL(LTRIM(MATERIALTYPE,'0'),''),-- TIPOMATERIAL_ID, 
            IFNULL(LTRIM(PRICE_CTRL_MSOCIEDAD,'0'),''),-- CONTROL_PRECIOS, 
            IFNULL(LTRIM(INVENTORYSPECIALSTOCKTYPE,'0'),''),-- STOCKESPECIAL, 
            IFNULL(LTRIM(SPECIALSTOCKIDFGCUSTOMER,'0'),''),-- NUMSTOCKESPECIAL, 
            IFNULL(LTRIM(STOCKIDENTIFYINGBATCH,'0'),''),-- LOTE, 
            IFNULL(LTRIM(ATWRT,'0'),''),-- LOTECENTRO_ID, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 01 THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END),0) AS IND_LIBRE_UTILIZACION_UMB,-- IND_LIBRE_UTILIZACION_UMB, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 07 THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END),0) AS IND_BLOQUEADO_UMB,-- IND_BLOQUEADO_UMB, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 02 THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END),0) AS IND_CONTROL_CALIDAD_UMB,-- IND_CONTROL_CALIDAD_UMB, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE IN (04,05,06)  THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END),0) AS IND_TRANSITO_UMB,-- IND_TRANSITO_UMB, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 01 THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END+
            CASE WHEN INVENTORYSTOCKTYPE = 07 THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END+
            CASE WHEN INVENTORYSTOCKTYPE = 02 THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END+ 
            CASE WHEN INVENTORYSTOCKTYPE IN (04,05,06)  THEN MATLWRHSSTKQTYINMATLBASEUNIT ELSE 0 END),0) AS IND_INVENTARIO_FISICO_UMB,-- IND_INVENTARIO_FISICO_UMB, 
            IFNULL(SUM(COM_QTY),0),-- IND_LIBRE_VENTA_UMB, 
            IFNULL(SUM(ZZEISBE),0),-- IND_STOCK_SEGURIDAD_UMB, 
            IFNULL(MATERIALBASEUNIT,''),-- UNI_UMB, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 01 THEN 
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END),0) AS IND_LIBRE_UTILIZACION_EST,-- IND_LIBRE_UTILIZACION_EST, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 07 THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END),0) AS IND_BLOQUEADO_EST,-- IND_BLOQUEADO_EST, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 02 THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END),0) AS IND_CONTROL_CALIDAD_EST,-- IND_CONTROL_CALIDAD_EST, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE IN (04,05,06) THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END),0) AS IND_TRANSITO_EST,-- IND_TRANSITO_EST, 
            IFNULL(SUM(CASE WHEN INVENTORYSTOCKTYPE = 01 THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END +
            CASE WHEN INVENTORYSTOCKTYPE = 07 THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END +
            CASE WHEN INVENTORYSTOCKTYPE = 02 THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END +
            CASE WHEN INVENTORYSTOCKTYPE IN (04,05,06) THEN
                            CASE WHEN MATERIALBASEUNIT IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT
                                 WHEN MEINH IN ('TO','M2') THEN MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                                 WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN MATLWRHSSTKQTYINMATLBASEUNIT/1000 ELSE MATLWRHSSTKQTYINMATLBASEUNIT * (UMREN/UMREZ) END ELSE 0 END),0) AS IND_INVENTARIO_FISICO_EST,-- IND_INVENTARIO_FISICO_EST, 
            IFNULL(SUM(
                CASE WHEN MEINH IN ('TO','M2') THEN COM_QTY
                                 WHEN MEINH IN ('TO','M2') THEN COM_QTY * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (COM_QTY * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                     WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN COM_QTY/1000 ELSE COM_QTY * (UMREN/UMREZ) END),0),-- IND_LIBRE_VENTA_EST, 
            IFNULL(SUM(
                CASE WHEN MEINH IN ('TO','M2') THEN ZZEISBE
                                 WHEN MEINH IN ('TO','M2') THEN COM_QTY * (UMREN/UMREZ)
                                 WHEN PLANT LIKE 'A%' AND MEINH = 'KG' THEN (COM_QTY * (UMREN/UMREZ))/1000
                                 WHEN MEINH NOT IN ('TO','M2','KG') AND MATERIALBASEUNIT <> 'KG' THEN 0
                     WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN ZZEISBE/1000 ELSE ZZEISBE * (UMREN/UMREZ) END),0),-- IND_STOCK_SEGURIDAD_EST, 
            IFNULL(CASE WHEN PLANT LIKE 'R%' THEN 
                        CASE 
                            WHEN MATERIALBASEUNIT = 'M2' THEN 'M2'
                            WHEN MATERIALBASEUNIT <> 'M2' AND UMREN IS NULL THEN ''
                            ELSE 'M2'
                        END
                        WHEN PLANT LIKE 'A%' THEN 
                            CASE WHEN MATERIALBASEUNIT='TO' THEN 'TON'
                                WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN 'TON' 
                                WHEN MATERIALBASEUNIT<>'KG' AND UMREN IS NULL THEN ''
                                ELSE 'TON' END
                            END,''),-- UNI_EST, 
            IFNULL(SUM(CASE WHEN PRICE_BASE_MGRUPO=0 THEN 0 ELSE (MATLWRHSSTKQTYINMATLBASEUNIT*MATPRICE_MGRUPO)/PRICE_BASE_MGRUPO END),0),-- IND_COSTO_INV_MXN, 
            IFNULL(CURRENCY_MGRUPO,''),-- MON_MXN, 
            IFNULL(SUM(CASE WHEN PRICE_BASE_MSOCIEDAD=0 THEN 0 ELSE (MATLWRHSSTKQTYINMATLBASEUNIT*MATPRICE_MSOCIEDAD)/PRICE_BASE_MSOCIEDAD END),0),-- IND_COSTO_INV_LOC, 
            IFNULL(CURRENCY_MSOCIEDAD,''),-- MON_LOC, 
            IFNULL(SUM(CASE WHEN PRICE_BASE_MFUERTE=0 THEN 0 ELSE (MATLWRHSSTKQTYINMATLBASEUNIT*MATPRICE_MFUERTE)/PRICE_BASE_MFUERTE END),0),-- IND_COSTO_INV_USD, 
            IFNULL(CURRENCY_MFUERTE,''),-- MON_USD, 
            Z.SISORIGEN_ID,-- SISORIGEN_ID, 
            Z.MANDANTE,-- MANDANTE, 
            CURRENT_TIMESTAMP,-- FECHA_CARGA, 
            RIGHT(CURRENT_TIMESTAMP,5),-- ZONA_HORARIA  
        FROM RAW.SQ1_MOF_ZMM_INVENTARIO Z
        LEFT JOIN (SELECT *
                    from
                    (SELECT MEINH,MATNR,UMREZ,UMREN,
                    CASE    WHEN MEINH='TO' THEN 1
                            WHEN MEINH='M2' THEN 2
                            WHEN MEINH='KG' THEN 3
                            ELSE 9 END AS JERARQUIA,
                    ROW_NUMBER () OVER (PARTITION BY MATNR  ORDER BY JERARQUIA ASC) AS ROW_NUMBER
                    FROM RAW.SQ1_EXT_0MAT_UNIT_ATTR
                    ORDER BY JERARQUIA)
                    WHERE ROW_NUMBER =1) UNIT ON Z.MATERIAL=UNIT.MATNR
        LEFT JOIN RAW.SQ1_EXT_0MAT_PLANT_ATTR PLANT ON Z.MATERIAL=PLANT.MATNR AND Z.PLANT=PLANT.WERKS
        WHERE VALUATIONAREATYPE=1
        GROUP BY
        SUBSTR(Z.FECHA,1,4),-- ANIO,
        SUBSTR(Z.FECHA,6,2),-- MES, 
        CONCAT(SUBSTR(Z.FECHA,1,4),SUBSTR(Z.FECHA,6,2)),-- ANIOMES, 
        FECHA,-- FECHA_FOTO_INVENTARIO, 
        LTRIM(PLANT,'0'),-- CENTRO_ID, 
        LTRIM(STORAGELOCATION,'0'),-- ALMACEN_ID, 
        CONCAT(LTRIM(Z.PLANT,'0'),'_',LTRIM(Z.STORAGELOCATION,'0')),-- ALMACENCENTRO_ID, 
        LTRIM(MATERIAL,'0'),-- MATERIAL_ID, 
        CONCAT(LTRIM(PLANT,'0'),'_',LTRIM(MATERIAL,'0')),-- MATERIALCENTRO_ID, 
        LTRIM(MATERIALTYPE,'0'),-- TIPOMATERIAL_ID, 
        LTRIM(PRICE_CTRL_MSOCIEDAD,'0'),-- CONTROL_PRECIOS, 
        LTRIM(INVENTORYSPECIALSTOCKTYPE,'0'),-- STOCKESPECIAL, 
        LTRIM(SPECIALSTOCKIDFGCUSTOMER,'0'),-- NUMSTOCKESPECIAL, 
        LTRIM(STOCKIDENTIFYINGBATCH,'0'),-- LOTE, 
        LTRIM(ATWRT,'0'),-- LOTECENTRO_ID, 
        MATERIALBASEUNIT,-- UNI_UMB, 
        IFNULL(CASE WHEN PLANT LIKE 'R%' THEN 
                        CASE 
                            WHEN MATERIALBASEUNIT = 'M2' THEN 'M2'
                            WHEN MATERIALBASEUNIT <> 'M2' AND UMREN IS NULL THEN ''
                            ELSE 'M2'
                        END
                        WHEN PLANT LIKE 'A%' THEN 
                            CASE WHEN MATERIALBASEUNIT='TO' THEN 'TON'
                                WHEN MATERIALBASEUNIT='KG' AND UMREN IS NULL THEN 'TON' 
                                WHEN MATERIALBASEUNIT<>'KG' AND UMREN IS NULL THEN ''
                                ELSE 'TON' END
                            END,''),-- UNI_EST, 
        CURRENCY_MGRUPO,-- MON_MXN, 
        CURRENCY_MSOCIEDAD,-- MON_LOC, 
        CURRENCY_MFUERTE,-- MON_USD, 
        Z.SISORIGEN_ID,-- SISORIGEN_ID, 
        Z.MANDANTE,-- MANDANTE, 
        CURRENT_TIMESTAMP,-- FECHA_CARGA, 
        RIGHT(CURRENT_TIMESTAMP,5); -- ZONA_HORARIA  

        -- Conteo de filas insertadas
        SELECT COUNT(*) INTO :ROWS_INSERTED FROM PRE.PFCT_LOG_INVENTARIO;

        SELECT CURRENT_TIMESTAMP() INTO :F_FIN;
        SELECT DATEDIFF(millisecond, :F_INICIO, :F_FIN) INTO :T_EJECUCION;
    EXCEPTION
        WHEN statement_error THEN
            SELECT ('Error en INSERT: ' || :sqlerrm) INTO :TEXTO;
    END;

    ---------------------------------------------------------------------------------
    -- STEP 3: LOG
    ---------------------------------------------------------------------------------
        SELECT COALESCE(:TEXTO,'EJECUCION CORRECTA') INTO :TEXTO;

        INSERT INTO LOGS.HISTORIAL_EJECUCIONES 
        VALUES('SP_PRE_PFCT_LOG_INVENTARIO','PFCT_LOG_INVENTARIO', :F_INICIO, :F_FIN,:T_EJECUCION ,:ROWS_INSERTED, :TEXTO );

    ---------------------------------------------------------------------------------
    -- STEP 4: FINALIZACIÓN
    ---------------------------------------------------------------------------------
    RETURN CONCAT('Complete - Filas insertadas: ', ROWS_INSERTED);

END;
$$;